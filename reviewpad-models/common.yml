metrics-on-merge: true

extends:
  - https://github.com/reviewpad/.github/blob/dev/reviewpad-models/ship-show-ask.yml

labels:
  small:
    color: "#294b69"
  medium:
    color: "#a8c3f7"
  large:
    color: "#8a2138"
  waiting-approval:
    description: Pull request is waiting for approval
    color: "#fb8500"
  do-not-merge:
    description: Pull request cannot be merged
    color: "#e63946"
  requires-author-attention:
    description: Pull request requires the author to take action
    color: "#ae2012"

groups:
  - name: reviewpad bots
    spec: '["reviewpad-stage[bot]", "reviewpad[bot]"]'

  - name: reviewers to ignore
    spec: '["fmallet", "monicalacerda", "adrianoapmartins", "robinaidev", "catarinamarcal", "FabioFreitasP", "reviewpad-bot", "explore-dev-team", "engineeringbeta", "engineeringalpha"]'

  - name: maintainers
    spec: '["marcelosousa", "shay2025", "zolamk", "ferreiratiago"]'

rules:
  - name: is maintainer
    description: The pull request author is a maintainer.
    spec: $isElementOf($author(), $group("maintainers"))

  - name: has review strategy
    description: The pull request has a review strategy specified in the description.
    spec: $rule("review-strategy:ship") || $rule("review-strategy:show") || $rule("review-strategy:ask")

  - name: is ready
    description: The pull request is ready for Reviewpad to run.
    spec: '!$isDraft() && $state() == "open" && $rule("has review strategy") && $author() != "renovate"'
  
  - name: has changes requested
    description: |
      The pull request has a reviewer that requested changes.
      The reviewpad bots are ignored.
    spec: '$any($append($reviewers(), $requestedReviewers()), ($r: String => !$isElementOf($r, $group("reviewpad bots")) && $reviewerStatus($r) == "CHANGES_REQUESTED"))'
  
  - name: all reviewers approved
    description: |
      All reviewers have approved the pull request.
      The reviewpad bots are ignored.
    spec: '$length($requestedReviewers()) == 0 && $all($reviewers(), ($r: String => $r == $author() || $reviewerStatus($r) == "APPROVED" || $isElementOf($r, $group("reviewpad bots"))))'
  
  # Check if the pull request needs to be blocked.
  # This rules can be refined when extending this file.
  - name: should block pull request
    description: The pull request should be blocked.
    spec: $isElementOf("do-not-merge", $labels())

workflows:
  - name: check if pull request is ready
    description: Check if the pull request is ready for Reviewpad to run.
    run:
      - if: '!$rule("is ready")'
        then:
          - if: '!$rule("has review strategy")'
            then: $error("Please specify a review strategy in the description.")
          - if: '$pullRequestCountBy($author(), "open") >= 3'
            then: $error("You have too many pull requests open. Please close some of them first. Reviewpad will stop any further action on this pull request until you have less than 3 pull requests open. Once you have less than 3 pull requests open, please trigger Reviewpad by running the command `/reviewpad run` in a comment.")

  - name: size labeler
    description: Label a pull request based on the number of files changed.
    run:
      - if: $rule("is ready")
        then:
          - if: $size() <= 30
            then: $addLabel("small")
            else: $removeLabel("small")
          - if: $size() > 30 && $size() <= 100
            then: $addLabel("medium")
            else: $removeLabel("medium")
          - if: $size() > 100
            then: $addLabel("large")
            else: $removeLabel("large")

  - name: commit compliance
    description: |
      Check if the pull request commits and title follow the conventional commits specification.
      This is useful for generating changelogs.
      The title is checked because it can be used as the commit message when merging.
    run:
      - if: $rule("is ready")
        then:
          - $commitLint()
          - $titleLint()

  - name: empty description on issue
    description: Check if the issue has a description and was created more 2 minutes ago
    on:
      - issue
    run:
      - if: $description() == "" && $createdAt() > 120
        then: $close("Automatically closing this issue. Please add a description.")
  
  - name: empty description on pull request
    description: Check if the pull request has a description.
    run:
      - if: $rule("is ready") && $description() == ""
        then: $close("Automatically closing this issue/pull request. Please add a description.")

  - name: welcome first pull request time contributor
    run:
      - if: $rule("is ready") && $pullRequestCountBy($author(), "all") == 1
        then: $commentOnce($sprintf("Welcome @%v! Thank you so much for your first pull request! The team will review it as soon as possible.", [$author()]))

  - name: welcome first time issue contributor
    on:
      - issue
    run:
        - if: $issueCountBy($author(), "all") == 1
          then: $commentOnce($sprintf("Welcome @%v! Thank you so much for your first issue!", [$author()]))

  - name: link issue to project
    description: Link an issue to Reviewpad project.
    on:
      - issue
    run:
      - if: $state() == "open" && !$isLinkedToProject("Reviewpad") && !$isElementOf("epic", $labels())
        then: $addToProject("Reviewpad", "Backlog")
      - if: $state() == "closed"
        then: $addToProject("Reviewpad", "Done")
  
  - name: summarize issue
    description: Summarize an issue using AI.
    on:
      - issue
    run:
      - if: $state() == "open" && !$isLinkedToProject("Reviewpad")
        then: $summarize()

  - name: attention set
    description: Set the type of attention required for the pull request.
    run:
      - if: $rule("has changes requested")
        then: $addLabel("requires-author-attention")
        else: $removeLabel("requires-author-attention")
      - if: $rule("all reviewers approved")
        then: $removeLabel("waiting-approval")
        else: $addLabel("waiting-approval")

pipelines:
  - name: merge strategy ask
    trigger: $rule("is ready") && ($rule("review-strategy:ask") || !$rule("is maintainer"))
    stages:
      - actions: 
          - $review("REQUEST_CHANGES", "The pull request has git conflicts. Please fix them.")
        until: '!$hasGitConflicts()'
      - actions: 
          - $review("REQUEST_CHANGES", "Pull request is not rebaseable. Please rebase it manually.")
        until: $selectFromContext("$.rebaseable") == "true"
      - actions:
          - $comment("Pull request is not up to date with the base branch. Reviewpad will rebase it. After the rebase, please trigger Reviewpad by running the command `/reviewpad run` in a comment.")
          - $rebase()
        until: $isUpdatedWithBaseBranch() && $hasLinearHistory()
      - actions: 
          - $review("REQUEST_CHANGES", "Some checks are failing. Please fix them.")
        until: '!$hasAnyCheckRunCompleted([], ["failure"])'
      - actions:
          - $info("Reviewpad is waiting for all checks to complete with success.")
        until: $haveAllChecksRunCompleted(["reviewpad"], "success", ["Copilot for PRs"])
      - actions:
          - $assignAssignees([$author()])
          - $assignCodeAuthorReviewers(1, $group("reviewers to ignore"), 2)
        until: $assignees() != []
      - actions:
          - $warn("The pull request has changes requested. Please review them.")
        until: '!$rule("has changes requested")'
      - actions:
          - $info("Reviewpad is waiting for all reviewers to approve it.")
        until: $rule("all reviewers approved") && $approvalsCount() > 0
      - actions:
          - $comment("The merge is blocked by the label **`do-not-merge`**.")
        until: '!$isElementOf("do-not-merge", $labels())'
      - actions:
          - $comment("The pull request cannot be merged. The rule **`should block pull request`** is not satisfied.")
        until: '!$rule("should block pull request")'
      - actions:
          - $approve("Pull request is ready to be merged. Reviewpad will merge it for you.")
          - $merge("squash")
          - $deleteHeadBranch()

  - name: merge strategy show
    trigger: $rule("is ready") && $rule("review-strategy:show") && $rule("is maintainer")
    stages:
      - actions: 
          - $review("REQUEST_CHANGES", "The pull request has git conflicts. Please fix them.")
        until: '!$hasGitConflicts()'
      - actions: 
          - $review("REQUEST_CHANGES", "Pull request is not rebaseable. Please rebase it manually.")
        until: $selectFromContext("$.rebaseable") == "true"
      - actions:
          - $comment("Pull request is not up to date with the base branch. Reviewpad will rebase it.")
          - $rebase()
        until: $isUpdatedWithBaseBranch() && $hasLinearHistory()
      - actions: 
          - $review("REQUEST_CHANGES", "Some checks are failing. Please fix them.")
        until: '!$hasAnyCheckRunCompleted([], ["failure"])'
      - actions:
          - $info("Reviewpad is waiting for all checks to complete with success.")
        until: $haveAllChecksRunCompleted(["reviewpad"], "success", ["Copilot for PRs"])
      - actions:
          - $comment("The merge is blocked by the label **`do-not-merge`**.")
        until: '!$isElementOf("do-not-merge", $labels())'
      - actions:
          - $comment("The pull request cannot be merged. The rule **`should block pull request`** is not satisfied.")
        until: '!$rule("should block pull request")'
      - actions:
          - $assignAssignees([$author()])
          - $approve($sprintf("Pull request is in `show` mode. Reviewpad will merge it. @%v kindly reminder to add this pull request to the meeting agenda where pull requests with the `show` strategy are reviewed.", [$author()]))
          - $merge("squash")
          - $deleteHeadBranch()
  
  - name: merge strategy ship
    trigger: $rule("is ready") && $rule("review-strategy:ship") && $rule("is maintainer")
    stages:
      - actions: 
          - $review("REQUEST_CHANGES", "The pull request has git conflicts. Please fix them.")
        until: '!$hasGitConflicts()'
      - actions: 
          - $review("REQUEST_CHANGES", "Pull request is not rebaseable. Please rebase it manually.")
        until: $selectFromContext("$.rebaseable") == "true"
      - actions:
          - $comment("Pull request is not up to date with the base branch. Reviewpad will rebase it.")
          - $rebase()
        until: $isUpdatedWithBaseBranch() && $hasLinearHistory()
      - actions: 
          - $review("REQUEST_CHANGES", "Some checks are failing. Please fix them.")
        until: '!$hasAnyCheckRunCompleted([], ["failure"])'
      - actions:
          - $info("Reviewpad is waiting for all checks to complete with success.")
        until: $haveAllChecksRunCompleted(["reviewpad"], "success", ["Copilot for PRs"])
      - actions:
          - $comment("The merge is blocked by the label **`do-not-merge`**.")
        until: '!$isElementOf("do-not-merge", $labels())'
      - actions:
          - $comment("The pull request cannot be merged. The rule **`should block pull request`** is not satisfied.")
        until: '!$rule("should block pull request")'
      - actions:
          - $assignAssignees([$author()])
          - $approve("Pull request is in `ship` mode. Reviewpad will merge it.")
          - $merge("squash")
          - $deleteHeadBranch()
